
# Pod와 Container

## Pod란 무엇인가?

### 쉬운 비유
**Pod**는 **원룸**과 같습니다:
- 한 개 또는 여러 개의 컨테이너가 함께 살 수 있는 공간
- 같은 Pod 안의 컨테이너들은 **네트워크와 저장소를 공유**
- 보통은 **컨테이너 1개 = Pod 1개**로 사용

```
🏠 Pod = 원룸
├── 📦 Container 1 = 메인 룸메이트 (웹 서버)
├── 📦 Container 2 = 보조 룸메이트 (로그 수집기)
├── 🌐 공유 네트워크 = 같은 IP 주소
└── 💾 공유 볼륨 = 같은 저장 공간
```

## Container vs Pod 비교

### Container (컨테이너)
- **개념**: 애플리케이션과 필요한 모든 파일을 묶은 **패키지**
- **예시**: 웹 서버, 데이터베이스, 로그 수집기 등
- **특징**: 독립적으로 실행되는 프로세스

### Pod (파드)
- **개념**: 하나 이상의 컨테이너를 묶은 **실행 단위**
- **예시**: 웹 서버 + 로그 수집기를 하나의 Pod로 묶음
- **특징**: Kubernetes에서 배포/관리하는 **최소 단위**

## Pod의 특징

### 1. 공유 네트워크
```yaml
# 같은 Pod 안의 컨테이너들
Container A: localhost:8080 (웹 서버)
Container B: localhost:9090 (모니터링)
# 서로 localhost로 통신 가능!
```

### 2. 공유 저장소
```yaml
# 같은 Pod 안의 컨테이너들이 공유하는 폴더
/shared-data/
├── app-logs/     # 웹 서버가 로그 저장
└── processed/    # 로그 수집기가 처리된 로그 저장
```

### 3. 생명주기 공유
- Pod가 생성되면 모든 컨테이너가 함께 시작
- Pod가 삭제되면 모든 컨테이너가 함께 종료
- 하나의 컨테이너가 죽으면 전체 Pod가 재시작

## 언제 여러 컨테이너를 한 Pod에?

### 좋은 예시 ✅
```yaml
# 웹 서버 + 로그 수집기
Pod:
  - nginx (웹 서버)
  - filebeat (로그를 수집해서 중앙으로 전송)
  
# 이유: 웹 서버의 로그를 실시간으로 수집해야 함
```

### 나쁜 예시 ❌
```yaml
# 웹 서버 + 데이터베이스
Pod:
  - nginx (웹 서버)
  - mysql (데이터베이스)
  
# 이유: 독립적으로 확장되어야 하는데 묶여있으면 비효율적
```

## 실제 Pod 예시

### 간단한 웹 서버 Pod
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-web-app
  labels:
    app: web
spec:
  containers:
  - name: nginx
    image: nginx:1.20
    ports:
    - containerPort: 80
```

**설명**:
- `nginx:1.20` 이미지를 사용하는 컨테이너
- 80번 포트로 웹 서비스 제공
- Pod 이름은 `my-web-app`

### 다중 컨테이너 Pod
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: web-with-sidecar
spec:
  containers:
  - name: web-server
    image: nginx:1.20
    ports:
    - containerPort: 80
    volumeMounts:
    - name: shared-logs
      mountPath: /var/log/nginx
      
  - name: log-collector
    image: fluent/fluent-bit:1.8
    volumeMounts:
    - name: shared-logs
      mountPath: /var/log/nginx
      
  volumes:
  - name: shared-logs
    emptyDir: {}
```

**설명**:
- 웹 서버(nginx)와 로그 수집기(fluent-bit)가 한 Pod에
- `/var/log/nginx` 폴더를 공유해서 로그를 실시간 수집

## Pod의 상태

### Pod 생명주기
```mermaid
graph LR
    A[Pending] --> B[Running]
    B --> C[Succeeded]
    B --> D[Failed]
    D --> E[CrashLoopBackOff]
    E --> B
```

- **Pending**: Pod가 생성되었지만 아직 실행되지 않음
- **Running**: Pod가 정상적으로 실행 중
- **Succeeded**: Pod가 성공적으로 완료됨
- **Failed**: Pod 실행이 실패함
- **CrashLoopBackOff**: Pod가 계속 재시작되고 있음

## 실습: 첫 번째 Pod 만들기

### 1. Pod 생성
```bash
# 간단한 nginx Pod 생성
kubectl run my-nginx --image=nginx --port=80
```

### 2. Pod 상태 확인
```bash
# 모든 Pod 목록 보기
kubectl get pods

# 특정 Pod 상세 정보
kubectl describe pod my-nginx
```

### 3. Pod 로그 확인
```bash
# Pod의 로그 보기
kubectl logs my-nginx
```

### 4. Pod 접속하기
```bash
# Pod 내부로 접속
kubectl exec -it my-nginx -- /bin/bash
```

### 5. Pod 삭제
```bash
# Pod 삭제
kubectl delete pod my-nginx
```

## 주의사항

### Pod는 일시적이다
- Pod는 언제든지 삭제/재생성될 수 있음
- **중요한 데이터는 Pod 외부에 저장**해야 함
- Pod IP 주소는 재생성될 때마다 변경됨

### Pod 직접 생성 vs Deployment 사용
- **개발/테스트**: Pod 직접 생성 가능
- **운영 환경**: [[Deployment와 ReplicaSet]] 사용 권장

## 다음 단계
Pod의 개념을 이해했다면 [[Service와 Networking]]을 통해 Pod에 접근하는 방법을 알아보세요!

